#!/bin/bash

: ${LINESTOARGS_ARG_MARKER='{}'}
argMarker="$LINESTOARGS_ARG_MARKER"; unset LINESTOARGS_ARG_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '-c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Read lines from standard input and pass them as individual arguments
(${argMarker:+either }appended${argMarker:+ or replacing any $argMarker marker}) to COMMAND.
Similar to xargs -d '\\n' COMMAND.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such. Read arguments
			are appended${argMarker:+ or replace the string $argMarker}.
HELPTEXT
}

isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printShortUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	printf -v escapedArgMarker %q "$argMarker"
	commands+=(${commands:+;} "${quotedSimpleCommand//"$escapedArgMarker"/$argMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
    else
	commands=("$@")
    fi
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printShortUsage "$0"
    exit 2
fi >&2


readarray -t lines


if [ "$isNeedEval" ]; then
    printf -v quotedLines '%q ' "${lines[@]}"; quotedLines="${quotedLines% }"
    typeset -a interpolatedCommands=("${commands[@]//"$argMarker"/$quotedLines}")
    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] && interpolatedCommands+=("$quotedLines")

    eval "${interpolatedCommands[@]}"
else
    didInterpolate=
    typeset -a interpolatedCommands=()
    for c in "${commands[@]}"
    do
    if [ "$c" = "$argMarker" ]; then
	interpolatedCommands+=("${lines[@]}")
	didInterpolate=t
    else
	interpolatedCommands+=("$c")
    fi
    done
    [ "$didInterpolate" ] || interpolatedCommands+=("${lines[@]}")

    "${interpolatedCommands[@]}"
fi
