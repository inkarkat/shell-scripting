#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Print all supplies command-line arguments as individual lines to standard output.
If COMMANDLINE is specified, pipe this output (if there is any, or also if
--command-takes-empty is given) through it (or invoke EMPTY-COMMANDLINE if there
are no arguments).
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-c|--command "COMMANDLINE"] [-E|--command-takes-empty|-e|--empty-command "EMPTY-COMMANDLINE"] [--] [ARG ...] [-?|-h|--help]'
}

targetCommand=
isCommandTakesEmpty=
emptyCommand=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--command|-c)	shift; targetCommand="$1"; shift;;
	--command-takes-empty|-E)
			shift; isCommandTakesEmpty=t;;
	--empty-command|-e)
			shift; emptyCommand="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ "$isCommandTakesEmpty" ] && [ "$emptyCommand" ]; then
    printUsage >&2 "$0"
    exit 2
fi


if [ $# -gt 0 ]; then
    eval "printf '%s\n'" '"$@"' "${targetCommand:+|}" "$targetCommand"
elif [ "$isCommandTakesEmpty" ] && [ "$targetCommand" ]; then
    printf '' | eval "$targetCommand"
elif [ "$emptyCommand" ]; then
    eval "$emptyCommand"
fi
