#!/bin/bash

: ${LINESTOARG_COMMAND_JOINER=;}
: ${LINESTOARG_LINE_WHAT=line}
: ${LINESTOARG_ARG_MARKER='{}'}
argMarker="$LINESTOARG_ARG_MARKER"; unset LINESTOARG_ARG_MARKER

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s%s %s\n' "$(basename "$1")" '[-r|--run-if-empty]' "${hasProgressNotification:+ [--progress SINK]}" "[--with-header|--with-prompt $(runWithPrompt --get-short-usage 2>/dev/null)] [--between-command BETWEEN-COMMAND] -c|--command \"COMMANDLINE\" [...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Read lines from standard input and pass each individually (${argMarker:+either }appended${argMarker:+ or
replacing any $argMarker marker}) to COMMAND. If COMMAND transforms the argument
to output line(s), this works like map.
Similar to xargs --no-run-if-empty -d '\\n' [-I {}] -n 1 COMMAND.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --run-if-empty|-r	Also run COMMANDs (without any supplied arguments) if
			there is no input. By default, nothing will be executed.
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such. Read arguments
			are appended${argMarker:+ or replace the string $argMarker}.${hasProgressNotification:+
    --progress SINK	Report the current line through one of the SINKs of the
			progressNotification command.}
    --with-header	Print a header (containing the current line) before each
			execution.
    --with-prompt	Emulate a full prompt (as if invoking COMMAND) before
			each execution.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT
    --between-command BETWEEN-COMMAND
		    Execute BETWEEN-COMMAND in between each COMMAND execution.
		    The last COMMAND's exit status is in \$?.
SEE ALSO:
- augmentLines additionally captures each COMMAND's output and combines it with
  the original line.

EXIT STATUS:
Overall exit status is the highest status of all. If you specify any
runWith[Prompt] argument, --worst-status needs to be explicitly passed.

Example:
HELPTEXT
    printf 'echonl google.com yahoo.com bing.com | %q %s\n' "$(basename "$1")" 'ping -c1 -q --'
}

progressSink=
with=
isRunIfEmpty=
commands=
betweenCommand=
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--run-if-empty|-r)
			shift; isRunIfEmpty=t;;
	--command|-c)	shift; commands+="${commands:+ $LINESTOARG_COMMAND_JOINER }$1"; shift;;
	--progress)	shift; progressSink="$1"; shift;;
	--with-header)	shift; with=header;;
	--with-prompt)	shift; with=runWithPrompt;;

	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--exit-on-failure|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift; : ${with:=runWith};;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift; : ${with:=runWith};;

	--between-command)
			shift; betweenCommand="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    printf -v escapedArgMarker %q "$argMarker"
    commands+="${commands:+ $LINESTOARG_COMMAND_JOINER }${quotedSimpleCommand//"$escapedArgMarker"/$argMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
fi
if [ -z "$commands" ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
elif [ ${#runWithPromptArgs[@]} -gt 0 -a "$with" = 'header' ]; then
    echo 'ERROR: Cannot combine runWith[Prompt] arguments with --with-header.'
    echo
    printUsage "$0"
    exit 2
fi >&2

if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
    typeset -a progressNotificationCommand=(progressNotification --to "$progressSink" ${LINESTOARG_LINE_WHAT:+--prepend-count "${LINESTOARG_LINE_WHAT}"})
fi

setStatus()
{
    return ${1:-0}
}

isFirst=t
isHeader=
case "$with" in
    runWith*)
	[ ${#runWithPromptArgs[@]} -eq 0 ] && runWithPromptArgs=(--worst-status)
	{
	    printf ' exec 4> >('
	    printf '%q ' "${progressNotificationCommand[@]}"
	    printf '2>/dev/null); reportProgress() { trap "reportProgress() { :; }; trap PIPE" PIPE; printf %%s\\\\n "$*" >&4 2>/dev/null; }\n'

	    while IFS=$'\n' read -r line || [ -n "$line" ] || { [ "$isRunIfEmpty" ] && [ "$isFirst" ]; }
	    do
		if [ ! "$isFirst" ] && [ -n "$betweenCommand" ]; then
		    if [ "${betweenCommand:$((${#betweenCommand} - 1))}" = ';' ]; then
			printf '%s ' "$betweenCommand"  # Prepend the BETWEEN-COMMAND to the next line's execution (so there's no separate prompt) if it ends with a semicolon. Its exit status is then ignored.
		    else
			printf '%s\n' "$betweenCommand" # Use a separate prompt (and with it consider its exit status).
		    fi
		fi

		printf ' reportProgress %q || :\n' "$line"

		printf -v line '%q' "$line"
		interpolatedCommands="${commands//"$argMarker"/$line}"
		typeset -a a=("$line")   # Need to use quoted line here.
		[ "$interpolatedCommands" = "$commands" ] || a=()

		printf '%s ' "$interpolatedCommands" "${a[@]}"
		printf '\n'
		isFirst=
	    done
	} | ${with:?} "${runWithPromptArgs[@]}"
	;;
    header)
	isHeader=t;&
    '')
	if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
	    exec 4> >("${progressNotificationCommand[@]}" 2>/dev/null)
	    reportProgress()
	    {
		trap 'reportProgress() { :; }; trap PIPE' PIPE
		printf '%s\n' "$*" >&4 2>/dev/null  # Silence "printf: write error: Broken pipe"
	    }
	else
	    reportProgress() { :; }
	fi

	status=0
	while IFS=$'\n' read -r line || [ -n "$line" ] || { [ "$isRunIfEmpty" ] && [ "$isFirst" ]; }
	do
	    if [ ! "$isFirst" ] && [ -n "$betweenCommand" ]; then
		setStatus $exitStatus; eval "$betweenCommand" || { exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }
	    fi

	    [ ! "$isHeader" ] || header ${isFirst:+--first} "$line"

	    reportProgress "$line"

	    typeset -a a=("$line")   # No quoting, as array provides separation.
	    printf -v line '%q' "$line"
	    interpolatedCommands="${commands//"$argMarker"/$line}"
	    [ "$interpolatedCommands" = "$commands" ] || a=()

	    eval "$interpolatedCommands" '"${a[@]}"' \
		|| { exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }
	    isFirst=
	done
	exit $status
	;;
    *)	printf >&2 'ASSERT: Invalid strategy: %s\n' "$with"; exit 3;;
esac
