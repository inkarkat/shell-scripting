#!/bin/bash
set -o pipefail

printUsage()
{
    cat <<HELPTEXT
Evaluate (exported) environment variables (\$VARIABLE / \${VARIABLE}) and shell
command substitutions (\$(COMMAND) / \`COMMAND\`) inside TEMPLATE-FILE (the
first line will be dropped if it looks like a #! shebang invoking it) and print
the result / write the result to TARGET-FILE. Backslashes must be doubled; all
other characters can remain as-is, like in a double-quoted string in the shell.
HELPTEXT
    echo
    printf 'Usage: [VAR=... [...]] %q %s\n' "$(basename "$1")" '[--] TEMPLATE-FILE [TARGET-FILE]'
    printf 'Usage: [VAR=... [...]] %q %s\n' "$(basename "$1")" '-t|--target TARGET-FILE [--] TEMPLATE-FILE'
    echo
    cat <<HELPSHEBANG
This can be used as a simple template expander where the template file uses a
shebang to evaluate itself:
HELPSHEBANG
    printf '#!/usr/bin/env %q\nTEMPLATE-TEXT\n...\n' "$(basename "$1")"
    printf 'Usage: TEMPLATE-FILE %s\n' '[[-t|--target] TARGET-FILE]'
}

templateFilespec=
targetFilespec=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printUsage "$0"; exit 0;;
	--target|-t)	    shift; targetFilespec="$1"; shift;;
	--target=*)	    targetFilespec="${1#--target=}"; shift;;
	-t*)		    targetFilespec="${1#-t}"; shift;;
	--)		    shift
			    if [ -z "$templateFilespec" ] && [ $# -gt 0 ]; then
				templateFilespec="$1"; shift
			    fi
			    break
			    ;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    if [ -z "$templateFilespec" ]; then
				templateFilespec="$1"; shift
				# Do not break yet to allow a -t|--target
				# _after_ the TEMPLATE-FILE for the shebang with
				# user passing the -t use case.
			    else
				break
			    fi
			    ;;
    esac
done
if [ $# -eq 0 ]; then
    :
elif [ $# -eq 1 -a -z "$targetFilespec" ]; then
    targetFilespec="$1"; shift
else
    printUsage "$0" >&2
    exit 2
fi

printEvaluatedTemplateWithoutShebang()
{
    local -r scriptName="$(basename -- "${BASH_SOURCE[0]}")"
    local -r literalScriptName="$(printf %s "$scriptName" | sed -e 's/[][\$*.^/]/\\&/g')"
    evalFile -- "${1:?}" | sed -e "1{ /^#!.*[[:space:]/]${literalScriptName}\\(\$\\|[[:space:]]\\)/{ N; s/\\n\$//; D } }"
}
evalTemplate()
{
    eval 'printEvaluatedTemplateWithoutShebang "${1:?}"' ${2:+'> "$2"'}
}

evalTemplate "$templateFilespec" "$targetFilespec"
