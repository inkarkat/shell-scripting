#!/bin/bash
set -o pipefail

: ${PIPELINEBUILDER_EXEC_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" "[-p|--paginate] [-r|--reverse] -c|--command \"COMMANDLINE\" [-c ...] --exec SIMPLECOMMAND [...] $PIPELINEBUILDER_EXEC_END [...] [--exec ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Build a pipeline out of COMMANDs, and process the input with it.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --paginate|-p	Send the output of COMMANDs to the pager (${PAGER}) if
			standard output goes to a terminal.
    --reverse|-r	Put all following COMMANDs and SIMPLECOMMANDs before
			existing COMMANDs instead of after them. This can come
			handy in an alias where the user can append arguments,
			but these should not go to the last pipeline command,
			but an earlier one.
    --command|-c CMD	Pipe the input into CMD / add CMD as a pipeline step.
			Multiple CMDs (and SIMPLECOMMAND) are combined as
			pipelines.
    --exec CMD [...] $PIPELINEBUILDER_EXEC_END	Pipe the input into CMD / add CMD as a pipeline step.
			All following arguments are taken to be arguments to the
			CMD until an argument consisting of '${PIPELINEBUILDER_EXEC_END}' is encountered.
HELPTEXT
}

addCommand()
{
    if [ "$isReverse" ]; then
	commands=("$1" ${commands:+|} "${commands[@]}")
    else
	commands+=(${commands:+|} "$1")
    fi
}

typeset pager=()
isReverse=
isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--paginate|-p)	shift; pager=("${PAGER:-less}" --RAW-CONTROL-CHARS); [ -t 1 ] || pager=();;
	--reverse|-r)	shift; isReverse=t;;
	--command|-c)	shift
			addCommand "$1"
			isNeedEval=t
			shift
			;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$PIPELINEBUILDER_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${PIPELINEBUILDER_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			addCommand "$cmd"
			isNeedEval=t
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	addCommand "${quotedSimpleCommand% }"
    else
	commands=("$@")
    fi
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo "ERROR: No COMMAND(s) specified; need to pass -c|--command \"COMMANDLINE\", or --exec SIMPLECOMMAND [...] $PIPELINEBUILDER_EXEC_END or SIMPLECOMMAND."
    echo
    printUsage "$0"
    exit 2
fi >&2


runPipeline()
{
    if [ "$isNeedEval" ]; then
	eval "${commands[@]}"
    else
	exec "${commands[@]}"
    fi
}

eval 'runPipeline' "${pager:+|}" '"${pager[@]}"'
